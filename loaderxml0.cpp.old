/**
* LoaderXML
* cargador de archivo XML
*
*
*   @Autor Julio César Gambandé
*   @Fecha 15 de febrero del 2020
*   @Email gambande.julio@gmail.com
*/


#include "loaderxml.h"


LoaderXML::LoaderXML(){

}

void LoaderXML::open(string archivo){
  ifstream input;
  string buffer;
  input.open(archivo);
  char* chararry;
  string auxil;
  Entidad* punta;
  string tempAtrib;

  enum{
    buscandoLlave,
    copiandoNombre,
    atributo,
    valorAtt,
    valor,
  }state = buscandoLlave;

punta = root = new Entidad("root");

while(!input.eof()){
  input>>buffer;
  chararry= bufer.c_str();
  for(i=0; i<buffer.size();i++){
    switch (estado) {
        case buscandoLlave:
          if(buffer[i]== '<'){
            auxil.clear();
            estado=copiandoNombre;
          }else if(buffer[i]== '>'){
            estado = llavedecierre;
          }else{
            auxil.push_back(buffer[i]);
            estado=buscandoLlave;
          }
          break;
        case copiandoNombre:
          if(buffer[i] != '/'){
            if(buffer[i+1] != '>')
            punta.AddHijo(new Entidad(auxil));
            auxil.clear();
            estado=buscandoLlave;
          }else if(buffer[i] == '>'){
            punta=punta.AddHijo(new Entidad(auxil));
            auxil.clear();
            estado=valor;
          }else if(buffer[i] == ' '){
            punta=punta.AddHijo(new Entidad(auxil));
            auxil.clear();
            estado=E1;
          }else if(buffer[i] != ' '){
            auxil.push_back(buffer[i]);
            estado=copiandoNombre;
          }
          break;
        case E1:
          if(buffer[i] != ' '){
            auxil.clear();
            estado=atributo;
          }else if((buffer[i] == '/') && (buffer[i+1] == '>')){
            punta.AddHijo(new Entidad(auxil));
            auxil.clear();
            estado=buscandoLlave;
          }else if(buffer[i] == '>'){
            punta=punta.AddHijo(new Entidad(auxil));
            auxil.clear();
            estado=valor;
          }else{
            estado=E1;
          }
          break;
        case atributo:
          if(buffer[i] == ' '){
            tempAtrib=auxil;
            auxil.clear();
            estado=A1;
          }else if((buffer[i] == '/') && (buffer[i+1] == '>')){
            punta.AddAtributo(auxil,NULL);
            auxil.clear();
            estado=buscandoLlave;
          }else if(buffer[i] == '>'){
            punta.AddAtributo(auxil," ");
            auxil.clear();
            estado=valor;
          }else if(buffer[i] == '='){
            tempAtrib=auxil;
            auxil.clear();
            estado=A2;
          }else{
            auxil.push_back(buffer[i]);
            estado=atributo;
          }
          break;
        case A1:
            if(buffer[i] == '='){
              estado=A2;
            }else if(buffer[i] == ' '){
              estado=A1;
            }else{
              punta.AddAtributo(auxil," ");
              auxil.clear();
              estado=atributo;
            }
            break;
        case A2:
            if(buffer[i] == '\"'){
              auxil.clear();
              estado=atribvalor;
            }else if(buffer[i] == ' '){
              estado=A2;
            }else{
              cout<<"Error: se esperaba comilla"<<endl;
            }
            break;
        case atribvalor:
            if (buffer[i] == '\"') {
              punta.AddAtributo(tempAtrib,auxil);
              auxil.clear();
              estado=E1;
            }else{
              auxil.push_back(buffer[i]);
              estado=atribvalor
            }
            break;
        case valor:
            if (buffer[i] == '<') {
            break;


    }


  }
}


}
